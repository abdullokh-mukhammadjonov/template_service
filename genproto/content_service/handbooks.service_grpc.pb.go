// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package content_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HandbooksServiceClient is the client API for HandbooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandbooksServiceClient interface {
	Create(ctx context.Context, in *Handbook, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetHandbooksRequest, opts ...grpc.CallOption) (*GetHandbooksResponse, error)
	GetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneHandbookResponse, error)
}

type handbooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHandbooksServiceClient(cc grpc.ClientConnInterface) HandbooksServiceClient {
	return &handbooksServiceClient{cc}
}

func (c *handbooksServiceClient) Create(ctx context.Context, in *Handbook, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/content.HandbooksService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handbooksServiceClient) Get(ctx context.Context, in *GetHandbooksRequest, opts ...grpc.CallOption) (*GetHandbooksResponse, error) {
	out := new(GetHandbooksResponse)
	err := c.cc.Invoke(ctx, "/content.HandbooksService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handbooksServiceClient) GetOne(ctx context.Context, in *GetOneRequest, opts ...grpc.CallOption) (*GetOneHandbookResponse, error) {
	out := new(GetOneHandbookResponse)
	err := c.cc.Invoke(ctx, "/content.HandbooksService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandbooksServiceServer is the server API for HandbooksService service.
// All implementations must embed UnimplementedHandbooksServiceServer
// for forward compatibility
type HandbooksServiceServer interface {
	Create(context.Context, *Handbook) (*emptypb.Empty, error)
	Get(context.Context, *GetHandbooksRequest) (*GetHandbooksResponse, error)
	GetOne(context.Context, *GetOneRequest) (*GetOneHandbookResponse, error)
	mustEmbedUnimplementedHandbooksServiceServer()
}

// UnimplementedHandbooksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHandbooksServiceServer struct {
}

func (UnimplementedHandbooksServiceServer) Create(context.Context, *Handbook) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHandbooksServiceServer) Get(context.Context, *GetHandbooksRequest) (*GetHandbooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHandbooksServiceServer) GetOne(context.Context, *GetOneRequest) (*GetOneHandbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedHandbooksServiceServer) mustEmbedUnimplementedHandbooksServiceServer() {}

// UnsafeHandbooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandbooksServiceServer will
// result in compilation errors.
type UnsafeHandbooksServiceServer interface {
	mustEmbedUnimplementedHandbooksServiceServer()
}

func RegisterHandbooksServiceServer(s grpc.ServiceRegistrar, srv HandbooksServiceServer) {
	s.RegisterService(&HandbooksService_ServiceDesc, srv)
}

func _HandbooksService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Handbook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandbooksServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.HandbooksService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandbooksServiceServer).Create(ctx, req.(*Handbook))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandbooksService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHandbooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandbooksServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.HandbooksService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandbooksServiceServer).Get(ctx, req.(*GetHandbooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandbooksService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandbooksServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.HandbooksService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandbooksServiceServer).GetOne(ctx, req.(*GetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HandbooksService_ServiceDesc is the grpc.ServiceDesc for HandbooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandbooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.HandbooksService",
	HandlerType: (*HandbooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HandbooksService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HandbooksService_Get_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _HandbooksService_GetOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handbooks.service.proto",
}
